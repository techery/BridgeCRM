apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.bridgecrm"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }

    signingConfigs {
        release {
            Properties signinProperties = new Properties()
            def pFile = rootProject.file('signing/signing.properties')
            if (pFile.exists()) {
                signinProperties.load(new FileInputStream(pFile))
                storeFile rootProject.file("signing/" + signinProperties.storeFile)
                storePassword signinProperties.storePassword
                keyAlias signinProperties.keyAlias
                keyPassword signinProperties.keyPassword
            }
        }
        debug {
            // Use same debug certificate within team
            storeFile rootProject.file("debug.keystore")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
        debug {
            versionNameSuffix ' dev'
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        preDexLibraries = rootProject.ext.preDexLibs // disabled cause of MultiDex
    }

    /** Some duplication dependencies inside â€“ ignoring */
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    // main
    compile 'com.android.support:support-v4:21.+'
    compile 'com.android.support:appcompat-v7:21.+'
    compile 'io.reactivex:rxandroid:+'
    // di
    compile 'com.squareup.dagger:dagger:1.+'
    compile('com.squareup.dagger:dagger-compiler:1.+') {
        exclude module: 'guava'
    }
    // network
    compile 'com.squareup.okhttp:okhttp:2.1.+'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.1.+'
    // ui
    compile 'com.github.johnkil.android-appmsg:appmsg:1.1.1'
    // services
    compile 'com.google.android.gms:play-services:6.+'
    // util
    compile 'com.jakewharton:butterknife:6.+'
    compile 'com.jakewharton.timber:timber:2.+'
}

// Play publisher plugin

apply plugin: 'play'

play {
    Properties p = new Properties()
    def pFile = rootProject.file('play/publish.properties')
    if (pFile.exists()) {
        p.load(new FileInputStream(pFile))
        //
        serviceAccountEmail = p.serviceEmail
        pk12File = rootProject.file("play/" + p.keyFile)
    }
}